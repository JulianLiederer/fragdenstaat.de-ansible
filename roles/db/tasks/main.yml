---

- name: Add the PostgreSQL public GPG key to the apt repo
  apt_key: url=https://www.postgresql.org/media/keys/ACCC4CF8.asc
           state=present

- name: Add PostgreSQL to the sources list
  apt_repository: repo='deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main'
                  update_cache={{ update_apt_cache }}
                  state=present

- name: Install PostgreSQL
  apt: name={{ item }} update_cache={{ update_apt_cache }} state=installed
  with_items:
    - postgresql-10
    - postgresql-contrib
    - libpq-dev
    - python3-psycopg2
  tags: packages

- name: Ensure the PostgreSQL service is running
  service: name=postgresql state=started enabled=yes

- name: ensure language packages are installed
  apt: pkg={{ item }} state=latest update_cache={{ update_apt_cache }}
  with_items:
    - language-pack-en
    - language-pack-en-base
  register: locale_exists

- name: Ensure locale exists
  locale_gen: name={{ item }}
  with_items:
    - en_GB.UTF-8
    - en_US.UTF-8

- name: ensure dpkg is reconfigured
  command: dpkg-reconfigure -f noninteractive locales
  when: locale_exists.changed

- name: restart postgres on locale change
  service: name=postgresql state=restarted enabled=yes
  when: locale_exists.changed

- name: Ensure database is created
  become_user: postgres
  postgresql_db: name={{ db_name }}
                 encoding='UTF-8'
                 lc_collate='en_GB.UTF-8'
                 lc_ctype='en_GB.UTF-8'
                 template='template0'
                 state=present

- name: Ensure user has access to the database
  become_user: postgres
  postgresql_user: db={{ db_name }}
                   name={{ db_user }}
                   password={{ db_password }}
                   priv=ALL
                   state=present
                   encrypted=yes

- name: Ensure user has access to tables
  become_user: postgres
  postgresql_privs:
    database: "{{ db_name }}"
    state: present
    privs: ALL
    type: table
    objs: ALL_IN_SCHEMA
    schema: public
    roles: "{{ db_user }}"
    grant_option: yes

- name: Ensure user has access to all sequences
  become_user: postgres
  postgresql_privs:
    database: "{{ db_name }}"
    state: present
    privs: ALL
    type: sequence
    objs: ALL_IN_SCHEMA
    schema: public
    roles: "{{ db_user }}"
    grant_option: yes

- name: Ensure user does not have unnecessary privileges
  become_user: postgres
  postgresql_user: name={{ db_user }}
                   role_attr_flags=NOSUPERUSER,NOCREATEDB
                   state=present
